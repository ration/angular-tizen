package tizen.httprelay.provider;import android.content.Intent;import android.os.Binder;import android.os.Handler;import android.os.IBinder;import android.util.Log;import android.widget.Toast;import com.samsung.android.sdk.SsdkUnsupportedException;import com.samsung.android.sdk.accessory.*;import java.io.IOException;public class HttpProviderService extends SAAgent {    public static final String TAG = "TizenHttpRelay";    private static final int HTTPRELAY_CHANNEL_ID = 188;    private static final Class<ServiceConnection> SASOCKET_CLASS = ServiceConnection.class;    private final IBinder mBinder = new LocalBinder();    private final WebRequestRelay relay;    private ServiceConnection mConnectionHandler = null;    Handler mHandler = new Handler();    public HttpProviderService() {        super(TAG, SASOCKET_CLASS);        relay = new WebRequestRelay();    }    @Override    public void onCreate() {            super.onCreate();        SA mAccessory = new SA();        try {            mAccessory.initialize(this);        } catch (SsdkUnsupportedException e) {            // try to handle SsdkUnsupportedException            if (processUnsupportedException(e) == true) {                return;            }        } catch (Exception e1) {            e1.printStackTrace();            /*             * Your application can not use Samsung Accessory SDK. Your application should work smoothly             * without using this SDK, or you may want to notify user and close your application gracefully             * (release resources, stop Service threads, close UI thread, etc.)             */            stopSelf();        }    }    @Override    public IBinder onBind(Intent intent) {        return mBinder;    }    @Override    protected void onFindPeerAgentResponse(SAPeerAgent peerAgent, int result) {        Log.d(TAG, "onFindPeerAgentResponse : result =" + result);    }    @Override    protected void onServiceConnectionRequested(SAPeerAgent peerAgent) {        if (peerAgent != null) {            Toast.makeText(getBaseContext(), R.string.ConnectionAcceptedMsg, Toast.LENGTH_SHORT).show();            acceptServiceConnectionRequest(peerAgent);        }    }    @Override    protected void onServiceConnectionResponse(SAPeerAgent peerAgent, SASocket socket, int result) {        if (result == SAAgent.CONNECTION_SUCCESS) {            if (socket != null) {                mConnectionHandler = (ServiceConnection) socket;            }        } else if (result == SAAgent.CONNECTION_ALREADY_EXIST) {            Log.e(TAG, "onServiceConnectionResponse, CONNECTION_ALREADY_EXIST");        }    }    @Override    protected void onAuthenticationResponse(SAPeerAgent peerAgent, SAAuthenticationToken authToken, int error) {        /*         * The authenticatePeerAgent(peerAgent) API may not be working properly depending on the firmware         * version of accessory device. Please refer to another sample application for Security.         */    }    @Override    protected void onError(SAPeerAgent peerAgent, String errorMessage, int errorCode) {        super.onError(peerAgent, errorMessage, errorCode);    }    private boolean processUnsupportedException(SsdkUnsupportedException e) {        e.printStackTrace();        int errType = e.getType();        if (errType == SsdkUnsupportedException.VENDOR_NOT_SUPPORTED                    || errType == SsdkUnsupportedException.DEVICE_NOT_SUPPORTED) {            /*             * Your application can not use Samsung Accessory SDK. You application should work smoothly             * without using this SDK, or you may want to notify user and close your app gracefully (release             * resources, stop Service threads, close UI thread, etc.)             */            stopSelf();        } else if (errType == SsdkUnsupportedException.LIBRARY_NOT_INSTALLED) {            Log.e(TAG, "You need to install Samsung Accessory SDK to use this application.");        } else if (errType == SsdkUnsupportedException.LIBRARY_UPDATE_IS_REQUIRED) {            Log.e(TAG, "You need to update Samsung Accessory SDK to use this application.");        } else if (errType == SsdkUnsupportedException.LIBRARY_UPDATE_IS_RECOMMENDED) {            Log.e(TAG, "We recommend that you update your Samsung Accessory SDK before using this application.");            return false;        }        return true;    }    public class LocalBinder extends Binder {        public HttpProviderService getService() {            return HttpProviderService.this;        }    }    public class ServiceConnection extends SASocket {        public ServiceConnection() {            super(ServiceConnection.class.getName());        }        @Override        public void onError(int channelId, String errorMessage, int errorCode) {        }        @Override        public void onReceive(int channelId, final byte[] data) {            if (mConnectionHandler == null) {                return;            }            new Thread(new Runnable() {                public void run() {                    try {                        mConnectionHandler.send(HTTPRELAY_CHANNEL_ID, relay.httpRequest(data));                    } catch (InvalidRequestException e) {                        Log.e(TAG,"Invalid request",e);                    } catch (IOException e) {                        Log.e(TAG,"IO Exception during request",e);                    }                }            }).start();        }        @Override        protected void onServiceConnectionLost(int reason) {            mConnectionHandler = null;            mHandler.post(new Runnable() {                @Override                public void run() {                    Toast.makeText(getBaseContext(), R.string.ConnectionTerminateddMsg, Toast.LENGTH_SHORT).show();                }            });        }    }}